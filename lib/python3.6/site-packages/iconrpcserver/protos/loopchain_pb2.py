# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: loopchain.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='loopchain.proto',
  package='',
  syntax='proto2',
  serialized_pb=_b('\n\x0floopchain.proto\"W\n\x07Message\x12\x0c\n\x04\x63ode\x18\x01 \x02(\x05\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x0f\n\x07message\x18\x03 \x01(\t\x12\x0c\n\x04meta\x18\x04 \x01(\t\x12\x0e\n\x06object\x18\x05 \x01(\x0c\"n\n\x15\x43omplainLeaderRequest\x12\x1c\n\x14\x63omplained_leader_id\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x15\n\rnew_leader_id\x18\x03 \x02(\t\x12\x0f\n\x07message\x18\x04 \x02(\t\"\x1d\n\x08PeerList\x12\x11\n\tpeer_list\x18\x01 \x02(\x0c\"0\n\x0f\x43reateTxRequest\x12\x0c\n\x04\x64\x61ta\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"J\n\rCreateTxReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x0f\n\x07tx_hash\x18\x02 \x02(\t\x12\x11\n\tmore_info\x18\x03 \x02(\t\"6\n\x06TxSend\x12\n\n\x02tx\x18\x01 \x01(\x0c\x12\x0f\n\x07tx_json\x18\x02 \x01(\t\x12\x0f\n\x07\x63hannel\x18\x03 \x01(\t\"7\n\nTxSendList\x12\x0f\n\x07\x63hannel\x18\x01 \x02(\t\x12\x18\n\x07tx_list\x18\x02 \x03(\x0b\x32\x07.TxSend\"\x83\x01\n\x0fGetBlockRequest\x12\x12\n\nblock_hash\x18\x01 \x01(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x18\n\x0c\x62lock_height\x18\x03 \x01(\x05:\x02-1\x12\x19\n\x11\x62lock_data_filter\x18\x04 \x02(\t\x12\x16\n\x0etx_data_filter\x18\x05 \x02(\t\"i\n\rGetBlockReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x12\n\nblock_hash\x18\x02 \x02(\t\x12\x17\n\x0f\x62lock_data_json\x18\x03 \x02(\t\x12\x14\n\x0ctx_data_json\x18\x04 \x03(\t\"/\n\x0cQueryRequest\x12\x0e\n\x06params\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"5\n\nQueryReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x10\n\x08response\x18\x02 \x02(\t\"0\n\x0cGetTxRequest\x12\x0f\n\x07tx_hash\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"y\n\nGetTxReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x0c\n\x04meta\x18\x02 \x02(\t\x12\x0c\n\x04\x64\x61ta\x18\x03 \x02(\t\x12\x11\n\tmore_info\x18\x04 \x02(\t\x12\x11\n\tsignature\x18\x05 \x02(\x0c\x12\x12\n\npublic_key\x18\x06 \x02(\x0c\":\n\x16GetInvokeResultRequest\x12\x0f\n\x07tx_hash\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"=\n\x14GetInvokeResultReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x0e\n\x06result\x18\x02 \x01(\t\"M\n\x10\x42lockSyncRequest\x12\x12\n\nblock_hash\x18\x01 \x01(\t\x12\x14\n\x0c\x62lock_height\x18\x02 \x01(\x05\x12\x0f\n\x07\x63hannel\x18\x03 \x01(\t\"f\n\x0e\x42lockSyncReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x14\n\x0c\x62lock_height\x18\x02 \x02(\x05\x12\x18\n\x10max_block_height\x18\x03 \x02(\x05\x12\r\n\x05\x62lock\x18\x04 \x02(\x0c\"C\n\x15PrecommitBlockRequest\x12\x19\n\x11last_block_height\x18\x01 \x01(\x05\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"U\n\x13PrecommitBlockReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x18\n\x10response_message\x18\x02 \x02(\t\x12\r\n\x05\x62lock\x18\x03 \x02(\x0c\"+\n\tBlockSend\x12\r\n\x05\x62lock\x18\x01 \x02(\x0c\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"=\n\x0cNewBlockSend\x12\r\n\x05\x62lock\x18\x01 \x02(\x0c\x12\r\n\x05\x65poch\x18\x02 \x02(\x0c\x12\x0f\n\x07\x63hannel\x18\x03 \x01(\t\"H\n\nBlockReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x0f\n\x07message\x18\x02 \x02(\t\x12\x12\n\nblock_hash\x18\x03 \x02(\t\"w\n\tBlockVote\x12\x11\n\tvote_code\x18\x01 \x02(\x05\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x0f\n\x07message\x18\x03 \x02(\t\x12\x12\n\nblock_hash\x18\x04 \x02(\t\x12\x0f\n\x07peer_id\x18\x05 \x02(\t\x12\x10\n\x08group_id\x18\x06 \x02(\t\"N\n\x04Vote\x12\x11\n\tvote_code\x18\x01 \x02(\x05\x12\x11\n\tvote_data\x18\x02 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x03 \x01(\t\x12\x0f\n\x07peer_id\x18\x04 \x02(\t\"C\n\rBlockAnnounce\x12\x12\n\nblock_hash\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\r\n\x05\x62lock\x18\x03 \x01(\x0c\"C\n\rCommonRequest\x12\x0f\n\x07request\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x10\n\x08group_id\x18\x03 \x01(\t\"5\n\x0b\x43ommonReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x0f\n\x07message\x18\x02 \x02(\t\"1\n\rStatusRequest\x12\x0f\n\x07request\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\"u\n\x0bStatusReply\x12\x0e\n\x06status\x18\x01 \x02(\t\x12\x14\n\x0c\x62lock_height\x18\x02 \x02(\x05\x12\x10\n\x08total_tx\x18\x03 \x02(\x05\x12\x1d\n\x15is_leader_complaining\x18\x04 \x01(\x05\x12\x0f\n\x07peer_id\x18\x05 \x01(\t\"\x1d\n\x0bStopRequest\x12\x0e\n\x06reason\x18\x01 \x02(\t\"\x1b\n\tStopReply\x12\x0e\n\x06status\x18\x01 \x02(\t\"\xc9\x01\n\x0bPeerRequest\x12\x0f\n\x07peer_id\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x13\n\x0bpeer_target\x18\x03 \x02(\t\x12\x10\n\x08group_id\x18\x04 \x02(\t\x12\x1c\n\tpeer_type\x18\x05 \x02(\x0e\x32\t.PeerType\x12\x0c\n\x04\x63\x65rt\x18\x06 \x01(\x0c\x12\x12\n\npeer_order\x18\x07 \x01(\x05\x12\x13\n\x0bpeer_object\x18\x08 \x01(\x0c\x12\x1c\n\tnode_type\x18\t \x01(\x0e\x32\t.NodeType\"\x94\x01\n\x12\x43onnectPeerRequest\x12\x0f\n\x07peer_id\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x13\n\x0bpeer_target\x18\x03 \x02(\t\x12\x10\n\x08group_id\x18\x04 \x02(\t\x12\x0c\n\x04\x63\x65rt\x18\x05 \x01(\x0c\x12\x12\n\npeer_order\x18\x06 \x01(\x05\x12\x13\n\x0bpeer_object\x18\x07 \x01(\x0c\"Z\n\x10\x43onnectPeerReply\x12\x0e\n\x06status\x18\x01 \x02(\x05\x12\x11\n\tpeer_list\x18\x02 \x02(\x0c\x12\x10\n\x08\x63hannels\x18\x03 \x03(\t\x12\x11\n\tmore_info\x18\x04 \x01(\t\"^\n\x16GetChannelInfosRequest\x12\x0f\n\x07peer_id\x18\x01 \x02(\t\x12\x13\n\x0bpeer_target\x18\x02 \x02(\t\x12\x10\n\x08group_id\x18\x03 \x02(\t\x12\x0c\n\x04\x63\x65rt\x18\x04 \x01(\x0c\"D\n\x14GetChannelInfosReply\x12\x15\n\rresponse_code\x18\x01 \x02(\x05\x12\x15\n\rchannel_infos\x18\x02 \x02(\t\"<\n\x06PeerID\x12\x0f\n\x07peer_id\x18\x01 \x02(\t\x12\x0f\n\x07\x63hannel\x18\x02 \x01(\t\x12\x10\n\x08group_id\x18\x03 \x02(\t*<\n\x08PeerType\x12\x08\n\x04PEER\x10\x00\x12\x13\n\x0f\x42LOCK_GENERATOR\x10\x01\x12\x11\n\rRADIO_STATION\x10\x02*.\n\x08NodeType\x12\x11\n\rCommunityNode\x10\x03\x12\x0f\n\x0b\x43itizenNode\x10\x01\x32\xf5\x03\n\x0cInnerService\x12\x1f\n\x07Request\x12\x08.Message\x1a\x08.Message\"\x00\x12+\n\tGetStatus\x12\x0e.StatusRequest\x1a\x0c.StatusReply\"\x00\x12\x30\n\x0eGetScoreStatus\x12\x0e.StatusRequest\x1a\x0c.StatusReply\"\x00\x12\"\n\x04Stop\x12\x0c.StopRequest\x1a\n.StopReply\"\x00\x12&\n\x04\x45\x63ho\x12\x0e.CommonRequest\x1a\x0c.CommonReply\"\x00\x12.\n\x08GetBlock\x12\x10.GetBlockRequest\x1a\x0e.GetBlockReply\"\x00\x12%\n\x05Query\x12\r.QueryRequest\x1a\x0b.QueryReply\"\x00\x12)\n\tSubscribe\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x12+\n\x0bUnSubscribe\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x12\x34\n\x12NotifyLeaderBroken\x12\x0e.CommonRequest\x1a\x0c.CommonReply\"\x00\x12\x34\n\x12NotifyProcessError\x12\x0e.CommonRequest\x1a\x0c.CommonReply\"\x00\x32\xbf\n\n\x0bPeerService\x12\x1f\n\x07Request\x12\x08.Message\x1a\x08.Message\"\x00\x12+\n\tGetStatus\x12\x0e.StatusRequest\x1a\x0c.StatusReply\"\x00\x12\x30\n\x0eGetScoreStatus\x12\x0e.StatusRequest\x1a\x0c.StatusReply\"\x00\x12\"\n\x04Stop\x12\x0c.StopRequest\x1a\n.StopReply\"\x00\x12.\n\x08\x43reateTx\x12\x10.CreateTxRequest\x1a\x0e.CreateTxReply\"\x00\x12%\n\x05GetTx\x12\r.GetTxRequest\x1a\x0b.GetTxReply\"\x00\x12.\n\x08GetBlock\x12\x10.GetBlockRequest\x1a\x0e.GetBlockReply\"\x00\x12\x43\n\x11GetPrecommitBlock\x12\x16.PrecommitBlockRequest\x1a\x14.PrecommitBlockReply\"\x00\x12%\n\x05Query\x12\r.QueryRequest\x1a\x0b.QueryReply\"\x00\x12\x43\n\x0fGetInvokeResult\x12\x17.GetInvokeResultRequest\x1a\x15.GetInvokeResultReply\"\x00\x12\x31\n\tBlockSync\x12\x11.BlockSyncRequest\x1a\x0f.BlockSyncReply\"\x00\x12\x36\n\x18\x41nnounceUnconfirmedBlock\x12\n.BlockSend\x1a\x0c.CommonReply\"\x00\x12\x38\n\x17\x41nnounceNewBlockForVote\x12\r.NewBlockSend\x1a\x0c.CommonReply\"\x00\x12\x38\n\x16\x41nnounceConfirmedBlock\x12\x0e.BlockAnnounce\x1a\x0c.CommonReply\"\x00\x12/\n\x0f\x41nnounceNewPeer\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x12-\n\x12\x41nnounceDeletePeer\x12\x07.PeerID\x1a\x0c.CommonReply\"\x00\x12&\n\x04\x45\x63ho\x12\x0e.CommonRequest\x1a\x0c.CommonReply\"\x00\x12\x38\n\x0e\x43omplainLeader\x12\x16.ComplainLeaderRequest\x1a\x0c.CommonReply\"\x00\x12;\n\x11\x41nnounceNewLeader\x12\x16.ComplainLeaderRequest\x1a\x0c.CommonReply\"\x00\x12\x43\n\x0fGetChannelInfos\x12\x17.GetChannelInfosRequest\x1a\x15.GetChannelInfosReply\"\x00\x12\x31\n\x10GetLastBlockHash\x12\x0e.CommonRequest\x1a\x0b.BlockReply\"\x00\x12)\n\tSubscribe\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x12+\n\x0bUnSubscribe\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x12 \n\x05\x41\x64\x64Tx\x12\x07.TxSend\x1a\x0c.CommonReply\"\x00\x12(\n\tAddTxList\x12\x0b.TxSendList\x1a\x0c.CommonReply\"\x00\x12\x32\n\x14VoteUnconfirmedBlock\x12\n.BlockVote\x1a\x0c.CommonReply\"\x00\x12&\n\rBroadcastVote\x12\x05.Vote\x1a\x0c.CommonReply\"\x00\x32\x9b\x04\n\x0cRadioStation\x12\x1f\n\x07Request\x12\x08.Message\x1a\x08.Message\"\x00\x12+\n\tGetStatus\x12\x0e.StatusRequest\x1a\x0c.StatusReply\"\x00\x12\"\n\x04Stop\x12\x0c.StopRequest\x1a\n.StopReply\"\x00\x12\x43\n\x0fGetChannelInfos\x12\x17.GetChannelInfosRequest\x1a\x15.GetChannelInfosReply\"\x00\x12\x37\n\x0b\x43onnectPeer\x12\x13.ConnectPeerRequest\x1a\x11.ConnectPeerReply\"\x00\x12*\n\x0bGetPeerList\x12\x0e.CommonRequest\x1a\t.PeerList\"\x00\x12(\n\rGetPeerStatus\x12\x07.PeerID\x1a\x0c.StatusReply\"\x00\x12;\n\x11\x41nnounceNewLeader\x12\x16.ComplainLeaderRequest\x1a\x0c.CommonReply\"\x00\x12\x30\n\x0eGetRandomTable\x12\x0e.CommonRequest\x1a\x0c.CommonReply\"\x00\x12)\n\tSubscribe\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x12+\n\x0bUnSubscribe\x12\x0c.PeerRequest\x1a\x0c.CommonReply\"\x00\x32/\n\x0c\x41\x64minService\x12\x1f\n\x07Request\x12\x08.Message\x1a\x08.Message\"\x00\x32,\n\tContainer\x12\x1f\n\x07Request\x12\x08.Message\x1a\x08.Message\"\x00')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_PEERTYPE = _descriptor.EnumDescriptor(
  name='PeerType',
  full_name='PeerType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PEER', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BLOCK_GENERATOR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RADIO_STATION', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2951,
  serialized_end=3011,
)
_sym_db.RegisterEnumDescriptor(_PEERTYPE)

PeerType = enum_type_wrapper.EnumTypeWrapper(_PEERTYPE)
_NODETYPE = _descriptor.EnumDescriptor(
  name='NodeType',
  full_name='NodeType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CommunityNode', index=0, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CitizenNode', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3013,
  serialized_end=3059,
)
_sym_db.RegisterEnumDescriptor(_NODETYPE)

NodeType = enum_type_wrapper.EnumTypeWrapper(_NODETYPE)
PEER = 0
BLOCK_GENERATOR = 1
RADIO_STATION = 2
CommunityNode = 3
CitizenNode = 1



_MESSAGE = _descriptor.Descriptor(
  name='Message',
  full_name='Message',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='Message.code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='Message.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='Message.message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='meta', full_name='Message.meta', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='object', full_name='Message.object', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=19,
  serialized_end=106,
)


_COMPLAINLEADERREQUEST = _descriptor.Descriptor(
  name='ComplainLeaderRequest',
  full_name='ComplainLeaderRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='complained_leader_id', full_name='ComplainLeaderRequest.complained_leader_id', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='ComplainLeaderRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='new_leader_id', full_name='ComplainLeaderRequest.new_leader_id', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='ComplainLeaderRequest.message', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=108,
  serialized_end=218,
)


_PEERLIST = _descriptor.Descriptor(
  name='PeerList',
  full_name='PeerList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='peer_list', full_name='PeerList.peer_list', index=0,
      number=1, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=220,
  serialized_end=249,
)


_CREATETXREQUEST = _descriptor.Descriptor(
  name='CreateTxRequest',
  full_name='CreateTxRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='CreateTxRequest.data', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='CreateTxRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=251,
  serialized_end=299,
)


_CREATETXREPLY = _descriptor.Descriptor(
  name='CreateTxReply',
  full_name='CreateTxReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='CreateTxReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tx_hash', full_name='CreateTxReply.tx_hash', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='more_info', full_name='CreateTxReply.more_info', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=301,
  serialized_end=375,
)


_TXSEND = _descriptor.Descriptor(
  name='TxSend',
  full_name='TxSend',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tx', full_name='TxSend.tx', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tx_json', full_name='TxSend.tx_json', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='TxSend.channel', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=377,
  serialized_end=431,
)


_TXSENDLIST = _descriptor.Descriptor(
  name='TxSendList',
  full_name='TxSendList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='channel', full_name='TxSendList.channel', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tx_list', full_name='TxSendList.tx_list', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=433,
  serialized_end=488,
)


_GETBLOCKREQUEST = _descriptor.Descriptor(
  name='GetBlockRequest',
  full_name='GetBlockRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='block_hash', full_name='GetBlockRequest.block_hash', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='GetBlockRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_height', full_name='GetBlockRequest.block_height', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=True, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_data_filter', full_name='GetBlockRequest.block_data_filter', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tx_data_filter', full_name='GetBlockRequest.tx_data_filter', index=4,
      number=5, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=491,
  serialized_end=622,
)


_GETBLOCKREPLY = _descriptor.Descriptor(
  name='GetBlockReply',
  full_name='GetBlockReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='GetBlockReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_hash', full_name='GetBlockReply.block_hash', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_data_json', full_name='GetBlockReply.block_data_json', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tx_data_json', full_name='GetBlockReply.tx_data_json', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=624,
  serialized_end=729,
)


_QUERYREQUEST = _descriptor.Descriptor(
  name='QueryRequest',
  full_name='QueryRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='params', full_name='QueryRequest.params', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='QueryRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=731,
  serialized_end=778,
)


_QUERYREPLY = _descriptor.Descriptor(
  name='QueryReply',
  full_name='QueryReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='QueryReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='QueryReply.response', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=780,
  serialized_end=833,
)


_GETTXREQUEST = _descriptor.Descriptor(
  name='GetTxRequest',
  full_name='GetTxRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tx_hash', full_name='GetTxRequest.tx_hash', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='GetTxRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=835,
  serialized_end=883,
)


_GETTXREPLY = _descriptor.Descriptor(
  name='GetTxReply',
  full_name='GetTxReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='GetTxReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='meta', full_name='GetTxReply.meta', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='GetTxReply.data', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='more_info', full_name='GetTxReply.more_info', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signature', full_name='GetTxReply.signature', index=4,
      number=5, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='public_key', full_name='GetTxReply.public_key', index=5,
      number=6, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=885,
  serialized_end=1006,
)


_GETINVOKERESULTREQUEST = _descriptor.Descriptor(
  name='GetInvokeResultRequest',
  full_name='GetInvokeResultRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tx_hash', full_name='GetInvokeResultRequest.tx_hash', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='GetInvokeResultRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1008,
  serialized_end=1066,
)


_GETINVOKERESULTREPLY = _descriptor.Descriptor(
  name='GetInvokeResultReply',
  full_name='GetInvokeResultReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='GetInvokeResultReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='result', full_name='GetInvokeResultReply.result', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1068,
  serialized_end=1129,
)


_BLOCKSYNCREQUEST = _descriptor.Descriptor(
  name='BlockSyncRequest',
  full_name='BlockSyncRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='block_hash', full_name='BlockSyncRequest.block_hash', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_height', full_name='BlockSyncRequest.block_height', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='BlockSyncRequest.channel', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1131,
  serialized_end=1208,
)


_BLOCKSYNCREPLY = _descriptor.Descriptor(
  name='BlockSyncReply',
  full_name='BlockSyncReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='BlockSyncReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_height', full_name='BlockSyncReply.block_height', index=1,
      number=2, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_block_height', full_name='BlockSyncReply.max_block_height', index=2,
      number=3, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block', full_name='BlockSyncReply.block', index=3,
      number=4, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1210,
  serialized_end=1312,
)


_PRECOMMITBLOCKREQUEST = _descriptor.Descriptor(
  name='PrecommitBlockRequest',
  full_name='PrecommitBlockRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='last_block_height', full_name='PrecommitBlockRequest.last_block_height', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='PrecommitBlockRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1314,
  serialized_end=1381,
)


_PRECOMMITBLOCKREPLY = _descriptor.Descriptor(
  name='PrecommitBlockReply',
  full_name='PrecommitBlockReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='PrecommitBlockReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_message', full_name='PrecommitBlockReply.response_message', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block', full_name='PrecommitBlockReply.block', index=2,
      number=3, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1383,
  serialized_end=1468,
)


_BLOCKSEND = _descriptor.Descriptor(
  name='BlockSend',
  full_name='BlockSend',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='block', full_name='BlockSend.block', index=0,
      number=1, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='BlockSend.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1470,
  serialized_end=1513,
)


_NEWBLOCKSEND = _descriptor.Descriptor(
  name='NewBlockSend',
  full_name='NewBlockSend',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='block', full_name='NewBlockSend.block', index=0,
      number=1, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='epoch', full_name='NewBlockSend.epoch', index=1,
      number=2, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='NewBlockSend.channel', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1515,
  serialized_end=1576,
)


_BLOCKREPLY = _descriptor.Descriptor(
  name='BlockReply',
  full_name='BlockReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='BlockReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='BlockReply.message', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_hash', full_name='BlockReply.block_hash', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1578,
  serialized_end=1650,
)


_BLOCKVOTE = _descriptor.Descriptor(
  name='BlockVote',
  full_name='BlockVote',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vote_code', full_name='BlockVote.vote_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='BlockVote.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='BlockVote.message', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_hash', full_name='BlockVote.block_hash', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='BlockVote.peer_id', index=4,
      number=5, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group_id', full_name='BlockVote.group_id', index=5,
      number=6, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1652,
  serialized_end=1771,
)


_VOTE = _descriptor.Descriptor(
  name='Vote',
  full_name='Vote',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vote_code', full_name='Vote.vote_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vote_data', full_name='Vote.vote_data', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='Vote.channel', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='Vote.peer_id', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1773,
  serialized_end=1851,
)


_BLOCKANNOUNCE = _descriptor.Descriptor(
  name='BlockAnnounce',
  full_name='BlockAnnounce',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='block_hash', full_name='BlockAnnounce.block_hash', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='BlockAnnounce.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block', full_name='BlockAnnounce.block', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1853,
  serialized_end=1920,
)


_COMMONREQUEST = _descriptor.Descriptor(
  name='CommonRequest',
  full_name='CommonRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='CommonRequest.request', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='CommonRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group_id', full_name='CommonRequest.group_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1922,
  serialized_end=1989,
)


_COMMONREPLY = _descriptor.Descriptor(
  name='CommonReply',
  full_name='CommonReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='CommonReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='CommonReply.message', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1991,
  serialized_end=2044,
)


_STATUSREQUEST = _descriptor.Descriptor(
  name='StatusRequest',
  full_name='StatusRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='StatusRequest.request', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='StatusRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2046,
  serialized_end=2095,
)


_STATUSREPLY = _descriptor.Descriptor(
  name='StatusReply',
  full_name='StatusReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='StatusReply.status', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_height', full_name='StatusReply.block_height', index=1,
      number=2, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='total_tx', full_name='StatusReply.total_tx', index=2,
      number=3, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_leader_complaining', full_name='StatusReply.is_leader_complaining', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='StatusReply.peer_id', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2097,
  serialized_end=2214,
)


_STOPREQUEST = _descriptor.Descriptor(
  name='StopRequest',
  full_name='StopRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reason', full_name='StopRequest.reason', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2216,
  serialized_end=2245,
)


_STOPREPLY = _descriptor.Descriptor(
  name='StopReply',
  full_name='StopReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='StopReply.status', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2247,
  serialized_end=2274,
)


_PEERREQUEST = _descriptor.Descriptor(
  name='PeerRequest',
  full_name='PeerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='PeerRequest.peer_id', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='PeerRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_target', full_name='PeerRequest.peer_target', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group_id', full_name='PeerRequest.group_id', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_type', full_name='PeerRequest.peer_type', index=4,
      number=5, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cert', full_name='PeerRequest.cert', index=5,
      number=6, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_order', full_name='PeerRequest.peer_order', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_object', full_name='PeerRequest.peer_object', index=7,
      number=8, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='node_type', full_name='PeerRequest.node_type', index=8,
      number=9, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=3,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2277,
  serialized_end=2478,
)


_CONNECTPEERREQUEST = _descriptor.Descriptor(
  name='ConnectPeerRequest',
  full_name='ConnectPeerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='ConnectPeerRequest.peer_id', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='ConnectPeerRequest.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_target', full_name='ConnectPeerRequest.peer_target', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group_id', full_name='ConnectPeerRequest.group_id', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cert', full_name='ConnectPeerRequest.cert', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_order', full_name='ConnectPeerRequest.peer_order', index=5,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_object', full_name='ConnectPeerRequest.peer_object', index=6,
      number=7, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2481,
  serialized_end=2629,
)


_CONNECTPEERREPLY = _descriptor.Descriptor(
  name='ConnectPeerReply',
  full_name='ConnectPeerReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='ConnectPeerReply.status', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_list', full_name='ConnectPeerReply.peer_list', index=1,
      number=2, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channels', full_name='ConnectPeerReply.channels', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='more_info', full_name='ConnectPeerReply.more_info', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2631,
  serialized_end=2721,
)


_GETCHANNELINFOSREQUEST = _descriptor.Descriptor(
  name='GetChannelInfosRequest',
  full_name='GetChannelInfosRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='GetChannelInfosRequest.peer_id', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer_target', full_name='GetChannelInfosRequest.peer_target', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group_id', full_name='GetChannelInfosRequest.group_id', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cert', full_name='GetChannelInfosRequest.cert', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2723,
  serialized_end=2817,
)


_GETCHANNELINFOSREPLY = _descriptor.Descriptor(
  name='GetChannelInfosReply',
  full_name='GetChannelInfosReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='GetChannelInfosReply.response_code', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel_infos', full_name='GetChannelInfosReply.channel_infos', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2819,
  serialized_end=2887,
)


_PEERID = _descriptor.Descriptor(
  name='PeerID',
  full_name='PeerID',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='PeerID.peer_id', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='PeerID.channel', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group_id', full_name='PeerID.group_id', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2889,
  serialized_end=2949,
)

_TXSENDLIST.fields_by_name['tx_list'].message_type = _TXSEND
_PEERREQUEST.fields_by_name['peer_type'].enum_type = _PEERTYPE
_PEERREQUEST.fields_by_name['node_type'].enum_type = _NODETYPE
DESCRIPTOR.message_types_by_name['Message'] = _MESSAGE
DESCRIPTOR.message_types_by_name['ComplainLeaderRequest'] = _COMPLAINLEADERREQUEST
DESCRIPTOR.message_types_by_name['PeerList'] = _PEERLIST
DESCRIPTOR.message_types_by_name['CreateTxRequest'] = _CREATETXREQUEST
DESCRIPTOR.message_types_by_name['CreateTxReply'] = _CREATETXREPLY
DESCRIPTOR.message_types_by_name['TxSend'] = _TXSEND
DESCRIPTOR.message_types_by_name['TxSendList'] = _TXSENDLIST
DESCRIPTOR.message_types_by_name['GetBlockRequest'] = _GETBLOCKREQUEST
DESCRIPTOR.message_types_by_name['GetBlockReply'] = _GETBLOCKREPLY
DESCRIPTOR.message_types_by_name['QueryRequest'] = _QUERYREQUEST
DESCRIPTOR.message_types_by_name['QueryReply'] = _QUERYREPLY
DESCRIPTOR.message_types_by_name['GetTxRequest'] = _GETTXREQUEST
DESCRIPTOR.message_types_by_name['GetTxReply'] = _GETTXREPLY
DESCRIPTOR.message_types_by_name['GetInvokeResultRequest'] = _GETINVOKERESULTREQUEST
DESCRIPTOR.message_types_by_name['GetInvokeResultReply'] = _GETINVOKERESULTREPLY
DESCRIPTOR.message_types_by_name['BlockSyncRequest'] = _BLOCKSYNCREQUEST
DESCRIPTOR.message_types_by_name['BlockSyncReply'] = _BLOCKSYNCREPLY
DESCRIPTOR.message_types_by_name['PrecommitBlockRequest'] = _PRECOMMITBLOCKREQUEST
DESCRIPTOR.message_types_by_name['PrecommitBlockReply'] = _PRECOMMITBLOCKREPLY
DESCRIPTOR.message_types_by_name['BlockSend'] = _BLOCKSEND
DESCRIPTOR.message_types_by_name['NewBlockSend'] = _NEWBLOCKSEND
DESCRIPTOR.message_types_by_name['BlockReply'] = _BLOCKREPLY
DESCRIPTOR.message_types_by_name['BlockVote'] = _BLOCKVOTE
DESCRIPTOR.message_types_by_name['Vote'] = _VOTE
DESCRIPTOR.message_types_by_name['BlockAnnounce'] = _BLOCKANNOUNCE
DESCRIPTOR.message_types_by_name['CommonRequest'] = _COMMONREQUEST
DESCRIPTOR.message_types_by_name['CommonReply'] = _COMMONREPLY
DESCRIPTOR.message_types_by_name['StatusRequest'] = _STATUSREQUEST
DESCRIPTOR.message_types_by_name['StatusReply'] = _STATUSREPLY
DESCRIPTOR.message_types_by_name['StopRequest'] = _STOPREQUEST
DESCRIPTOR.message_types_by_name['StopReply'] = _STOPREPLY
DESCRIPTOR.message_types_by_name['PeerRequest'] = _PEERREQUEST
DESCRIPTOR.message_types_by_name['ConnectPeerRequest'] = _CONNECTPEERREQUEST
DESCRIPTOR.message_types_by_name['ConnectPeerReply'] = _CONNECTPEERREPLY
DESCRIPTOR.message_types_by_name['GetChannelInfosRequest'] = _GETCHANNELINFOSREQUEST
DESCRIPTOR.message_types_by_name['GetChannelInfosReply'] = _GETCHANNELINFOSREPLY
DESCRIPTOR.message_types_by_name['PeerID'] = _PEERID
DESCRIPTOR.enum_types_by_name['PeerType'] = _PEERTYPE
DESCRIPTOR.enum_types_by_name['NodeType'] = _NODETYPE

Message = _reflection.GeneratedProtocolMessageType('Message', (_message.Message,), dict(
  DESCRIPTOR = _MESSAGE,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:Message)
  ))
_sym_db.RegisterMessage(Message)

ComplainLeaderRequest = _reflection.GeneratedProtocolMessageType('ComplainLeaderRequest', (_message.Message,), dict(
  DESCRIPTOR = _COMPLAINLEADERREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:ComplainLeaderRequest)
  ))
_sym_db.RegisterMessage(ComplainLeaderRequest)

PeerList = _reflection.GeneratedProtocolMessageType('PeerList', (_message.Message,), dict(
  DESCRIPTOR = _PEERLIST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:PeerList)
  ))
_sym_db.RegisterMessage(PeerList)

CreateTxRequest = _reflection.GeneratedProtocolMessageType('CreateTxRequest', (_message.Message,), dict(
  DESCRIPTOR = _CREATETXREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:CreateTxRequest)
  ))
_sym_db.RegisterMessage(CreateTxRequest)

CreateTxReply = _reflection.GeneratedProtocolMessageType('CreateTxReply', (_message.Message,), dict(
  DESCRIPTOR = _CREATETXREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:CreateTxReply)
  ))
_sym_db.RegisterMessage(CreateTxReply)

TxSend = _reflection.GeneratedProtocolMessageType('TxSend', (_message.Message,), dict(
  DESCRIPTOR = _TXSEND,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:TxSend)
  ))
_sym_db.RegisterMessage(TxSend)

TxSendList = _reflection.GeneratedProtocolMessageType('TxSendList', (_message.Message,), dict(
  DESCRIPTOR = _TXSENDLIST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:TxSendList)
  ))
_sym_db.RegisterMessage(TxSendList)

GetBlockRequest = _reflection.GeneratedProtocolMessageType('GetBlockRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETBLOCKREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetBlockRequest)
  ))
_sym_db.RegisterMessage(GetBlockRequest)

GetBlockReply = _reflection.GeneratedProtocolMessageType('GetBlockReply', (_message.Message,), dict(
  DESCRIPTOR = _GETBLOCKREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetBlockReply)
  ))
_sym_db.RegisterMessage(GetBlockReply)

QueryRequest = _reflection.GeneratedProtocolMessageType('QueryRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUERYREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:QueryRequest)
  ))
_sym_db.RegisterMessage(QueryRequest)

QueryReply = _reflection.GeneratedProtocolMessageType('QueryReply', (_message.Message,), dict(
  DESCRIPTOR = _QUERYREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:QueryReply)
  ))
_sym_db.RegisterMessage(QueryReply)

GetTxRequest = _reflection.GeneratedProtocolMessageType('GetTxRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETTXREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetTxRequest)
  ))
_sym_db.RegisterMessage(GetTxRequest)

GetTxReply = _reflection.GeneratedProtocolMessageType('GetTxReply', (_message.Message,), dict(
  DESCRIPTOR = _GETTXREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetTxReply)
  ))
_sym_db.RegisterMessage(GetTxReply)

GetInvokeResultRequest = _reflection.GeneratedProtocolMessageType('GetInvokeResultRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETINVOKERESULTREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetInvokeResultRequest)
  ))
_sym_db.RegisterMessage(GetInvokeResultRequest)

GetInvokeResultReply = _reflection.GeneratedProtocolMessageType('GetInvokeResultReply', (_message.Message,), dict(
  DESCRIPTOR = _GETINVOKERESULTREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetInvokeResultReply)
  ))
_sym_db.RegisterMessage(GetInvokeResultReply)

BlockSyncRequest = _reflection.GeneratedProtocolMessageType('BlockSyncRequest', (_message.Message,), dict(
  DESCRIPTOR = _BLOCKSYNCREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:BlockSyncRequest)
  ))
_sym_db.RegisterMessage(BlockSyncRequest)

BlockSyncReply = _reflection.GeneratedProtocolMessageType('BlockSyncReply', (_message.Message,), dict(
  DESCRIPTOR = _BLOCKSYNCREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:BlockSyncReply)
  ))
_sym_db.RegisterMessage(BlockSyncReply)

PrecommitBlockRequest = _reflection.GeneratedProtocolMessageType('PrecommitBlockRequest', (_message.Message,), dict(
  DESCRIPTOR = _PRECOMMITBLOCKREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:PrecommitBlockRequest)
  ))
_sym_db.RegisterMessage(PrecommitBlockRequest)

PrecommitBlockReply = _reflection.GeneratedProtocolMessageType('PrecommitBlockReply', (_message.Message,), dict(
  DESCRIPTOR = _PRECOMMITBLOCKREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:PrecommitBlockReply)
  ))
_sym_db.RegisterMessage(PrecommitBlockReply)

BlockSend = _reflection.GeneratedProtocolMessageType('BlockSend', (_message.Message,), dict(
  DESCRIPTOR = _BLOCKSEND,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:BlockSend)
  ))
_sym_db.RegisterMessage(BlockSend)

NewBlockSend = _reflection.GeneratedProtocolMessageType('NewBlockSend', (_message.Message,), dict(
  DESCRIPTOR = _NEWBLOCKSEND,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:NewBlockSend)
  ))
_sym_db.RegisterMessage(NewBlockSend)

BlockReply = _reflection.GeneratedProtocolMessageType('BlockReply', (_message.Message,), dict(
  DESCRIPTOR = _BLOCKREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:BlockReply)
  ))
_sym_db.RegisterMessage(BlockReply)

BlockVote = _reflection.GeneratedProtocolMessageType('BlockVote', (_message.Message,), dict(
  DESCRIPTOR = _BLOCKVOTE,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:BlockVote)
  ))
_sym_db.RegisterMessage(BlockVote)

Vote = _reflection.GeneratedProtocolMessageType('Vote', (_message.Message,), dict(
  DESCRIPTOR = _VOTE,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:Vote)
  ))
_sym_db.RegisterMessage(Vote)

BlockAnnounce = _reflection.GeneratedProtocolMessageType('BlockAnnounce', (_message.Message,), dict(
  DESCRIPTOR = _BLOCKANNOUNCE,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:BlockAnnounce)
  ))
_sym_db.RegisterMessage(BlockAnnounce)

CommonRequest = _reflection.GeneratedProtocolMessageType('CommonRequest', (_message.Message,), dict(
  DESCRIPTOR = _COMMONREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:CommonRequest)
  ))
_sym_db.RegisterMessage(CommonRequest)

CommonReply = _reflection.GeneratedProtocolMessageType('CommonReply', (_message.Message,), dict(
  DESCRIPTOR = _COMMONREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:CommonReply)
  ))
_sym_db.RegisterMessage(CommonReply)

StatusRequest = _reflection.GeneratedProtocolMessageType('StatusRequest', (_message.Message,), dict(
  DESCRIPTOR = _STATUSREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:StatusRequest)
  ))
_sym_db.RegisterMessage(StatusRequest)

StatusReply = _reflection.GeneratedProtocolMessageType('StatusReply', (_message.Message,), dict(
  DESCRIPTOR = _STATUSREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:StatusReply)
  ))
_sym_db.RegisterMessage(StatusReply)

StopRequest = _reflection.GeneratedProtocolMessageType('StopRequest', (_message.Message,), dict(
  DESCRIPTOR = _STOPREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:StopRequest)
  ))
_sym_db.RegisterMessage(StopRequest)

StopReply = _reflection.GeneratedProtocolMessageType('StopReply', (_message.Message,), dict(
  DESCRIPTOR = _STOPREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:StopReply)
  ))
_sym_db.RegisterMessage(StopReply)

PeerRequest = _reflection.GeneratedProtocolMessageType('PeerRequest', (_message.Message,), dict(
  DESCRIPTOR = _PEERREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:PeerRequest)
  ))
_sym_db.RegisterMessage(PeerRequest)

ConnectPeerRequest = _reflection.GeneratedProtocolMessageType('ConnectPeerRequest', (_message.Message,), dict(
  DESCRIPTOR = _CONNECTPEERREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:ConnectPeerRequest)
  ))
_sym_db.RegisterMessage(ConnectPeerRequest)

ConnectPeerReply = _reflection.GeneratedProtocolMessageType('ConnectPeerReply', (_message.Message,), dict(
  DESCRIPTOR = _CONNECTPEERREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:ConnectPeerReply)
  ))
_sym_db.RegisterMessage(ConnectPeerReply)

GetChannelInfosRequest = _reflection.GeneratedProtocolMessageType('GetChannelInfosRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETCHANNELINFOSREQUEST,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetChannelInfosRequest)
  ))
_sym_db.RegisterMessage(GetChannelInfosRequest)

GetChannelInfosReply = _reflection.GeneratedProtocolMessageType('GetChannelInfosReply', (_message.Message,), dict(
  DESCRIPTOR = _GETCHANNELINFOSREPLY,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:GetChannelInfosReply)
  ))
_sym_db.RegisterMessage(GetChannelInfosReply)

PeerID = _reflection.GeneratedProtocolMessageType('PeerID', (_message.Message,), dict(
  DESCRIPTOR = _PEERID,
  __module__ = 'loopchain_pb2'
  # @@protoc_insertion_point(class_scope:PeerID)
  ))
_sym_db.RegisterMessage(PeerID)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class InnerServiceStub(object):
    """########################################################################
    Peer Services
    ########################################################################

    Peer Inner Service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Request = channel.unary_unary(
          '/InnerService/Request',
          request_serializer=Message.SerializeToString,
          response_deserializer=Message.FromString,
          )
      self.GetStatus = channel.unary_unary(
          '/InnerService/GetStatus',
          request_serializer=StatusRequest.SerializeToString,
          response_deserializer=StatusReply.FromString,
          )
      self.GetScoreStatus = channel.unary_unary(
          '/InnerService/GetScoreStatus',
          request_serializer=StatusRequest.SerializeToString,
          response_deserializer=StatusReply.FromString,
          )
      self.Stop = channel.unary_unary(
          '/InnerService/Stop',
          request_serializer=StopRequest.SerializeToString,
          response_deserializer=StopReply.FromString,
          )
      self.Echo = channel.unary_unary(
          '/InnerService/Echo',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.GetBlock = channel.unary_unary(
          '/InnerService/GetBlock',
          request_serializer=GetBlockRequest.SerializeToString,
          response_deserializer=GetBlockReply.FromString,
          )
      self.Query = channel.unary_unary(
          '/InnerService/Query',
          request_serializer=QueryRequest.SerializeToString,
          response_deserializer=QueryReply.FromString,
          )
      self.Subscribe = channel.unary_unary(
          '/InnerService/Subscribe',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.UnSubscribe = channel.unary_unary(
          '/InnerService/UnSubscribe',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.NotifyLeaderBroken = channel.unary_unary(
          '/InnerService/NotifyLeaderBroken',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.NotifyProcessError = channel.unary_unary(
          '/InnerService/NotifyProcessError',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )


  class InnerServiceServicer(object):
    """########################################################################
    Peer Services
    ########################################################################

    Peer Inner Service
    """

    def Request(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetScoreStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Echo(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UnSubscribe(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def NotifyLeaderBroken(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def NotifyProcessError(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_InnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Request': grpc.unary_unary_rpc_method_handler(
            servicer.Request,
            request_deserializer=Message.FromString,
            response_serializer=Message.SerializeToString,
        ),
        'GetStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetStatus,
            request_deserializer=StatusRequest.FromString,
            response_serializer=StatusReply.SerializeToString,
        ),
        'GetScoreStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetScoreStatus,
            request_deserializer=StatusRequest.FromString,
            response_serializer=StatusReply.SerializeToString,
        ),
        'Stop': grpc.unary_unary_rpc_method_handler(
            servicer.Stop,
            request_deserializer=StopRequest.FromString,
            response_serializer=StopReply.SerializeToString,
        ),
        'Echo': grpc.unary_unary_rpc_method_handler(
            servicer.Echo,
            request_deserializer=CommonRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'GetBlock': grpc.unary_unary_rpc_method_handler(
            servicer.GetBlock,
            request_deserializer=GetBlockRequest.FromString,
            response_serializer=GetBlockReply.SerializeToString,
        ),
        'Query': grpc.unary_unary_rpc_method_handler(
            servicer.Query,
            request_deserializer=QueryRequest.FromString,
            response_serializer=QueryReply.SerializeToString,
        ),
        'Subscribe': grpc.unary_unary_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'UnSubscribe': grpc.unary_unary_rpc_method_handler(
            servicer.UnSubscribe,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'NotifyLeaderBroken': grpc.unary_unary_rpc_method_handler(
            servicer.NotifyLeaderBroken,
            request_deserializer=CommonRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'NotifyProcessError': grpc.unary_unary_rpc_method_handler(
            servicer.NotifyProcessError,
            request_deserializer=CommonRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'InnerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class PeerServiceStub(object):
    """Peer Outer Service for Outer Client or other Peer
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Request = channel.unary_unary(
          '/PeerService/Request',
          request_serializer=Message.SerializeToString,
          response_deserializer=Message.FromString,
          )
      self.GetStatus = channel.unary_unary(
          '/PeerService/GetStatus',
          request_serializer=StatusRequest.SerializeToString,
          response_deserializer=StatusReply.FromString,
          )
      self.GetScoreStatus = channel.unary_unary(
          '/PeerService/GetScoreStatus',
          request_serializer=StatusRequest.SerializeToString,
          response_deserializer=StatusReply.FromString,
          )
      self.Stop = channel.unary_unary(
          '/PeerService/Stop',
          request_serializer=StopRequest.SerializeToString,
          response_deserializer=StopReply.FromString,
          )
      self.CreateTx = channel.unary_unary(
          '/PeerService/CreateTx',
          request_serializer=CreateTxRequest.SerializeToString,
          response_deserializer=CreateTxReply.FromString,
          )
      self.GetTx = channel.unary_unary(
          '/PeerService/GetTx',
          request_serializer=GetTxRequest.SerializeToString,
          response_deserializer=GetTxReply.FromString,
          )
      self.GetBlock = channel.unary_unary(
          '/PeerService/GetBlock',
          request_serializer=GetBlockRequest.SerializeToString,
          response_deserializer=GetBlockReply.FromString,
          )
      self.GetPrecommitBlock = channel.unary_unary(
          '/PeerService/GetPrecommitBlock',
          request_serializer=PrecommitBlockRequest.SerializeToString,
          response_deserializer=PrecommitBlockReply.FromString,
          )
      self.Query = channel.unary_unary(
          '/PeerService/Query',
          request_serializer=QueryRequest.SerializeToString,
          response_deserializer=QueryReply.FromString,
          )
      self.GetInvokeResult = channel.unary_unary(
          '/PeerService/GetInvokeResult',
          request_serializer=GetInvokeResultRequest.SerializeToString,
          response_deserializer=GetInvokeResultReply.FromString,
          )
      self.BlockSync = channel.unary_unary(
          '/PeerService/BlockSync',
          request_serializer=BlockSyncRequest.SerializeToString,
          response_deserializer=BlockSyncReply.FromString,
          )
      self.AnnounceUnconfirmedBlock = channel.unary_unary(
          '/PeerService/AnnounceUnconfirmedBlock',
          request_serializer=BlockSend.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AnnounceNewBlockForVote = channel.unary_unary(
          '/PeerService/AnnounceNewBlockForVote',
          request_serializer=NewBlockSend.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AnnounceConfirmedBlock = channel.unary_unary(
          '/PeerService/AnnounceConfirmedBlock',
          request_serializer=BlockAnnounce.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AnnounceNewPeer = channel.unary_unary(
          '/PeerService/AnnounceNewPeer',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AnnounceDeletePeer = channel.unary_unary(
          '/PeerService/AnnounceDeletePeer',
          request_serializer=PeerID.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.Echo = channel.unary_unary(
          '/PeerService/Echo',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.ComplainLeader = channel.unary_unary(
          '/PeerService/ComplainLeader',
          request_serializer=ComplainLeaderRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AnnounceNewLeader = channel.unary_unary(
          '/PeerService/AnnounceNewLeader',
          request_serializer=ComplainLeaderRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.GetChannelInfos = channel.unary_unary(
          '/PeerService/GetChannelInfos',
          request_serializer=GetChannelInfosRequest.SerializeToString,
          response_deserializer=GetChannelInfosReply.FromString,
          )
      self.GetLastBlockHash = channel.unary_unary(
          '/PeerService/GetLastBlockHash',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=BlockReply.FromString,
          )
      self.Subscribe = channel.unary_unary(
          '/PeerService/Subscribe',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.UnSubscribe = channel.unary_unary(
          '/PeerService/UnSubscribe',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AddTx = channel.unary_unary(
          '/PeerService/AddTx',
          request_serializer=TxSend.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.AddTxList = channel.unary_unary(
          '/PeerService/AddTxList',
          request_serializer=TxSendList.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.VoteUnconfirmedBlock = channel.unary_unary(
          '/PeerService/VoteUnconfirmedBlock',
          request_serializer=BlockVote.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.BroadcastVote = channel.unary_unary(
          '/PeerService/BroadcastVote',
          request_serializer=Vote.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )


  class PeerServiceServicer(object):
    """Peer Outer Service for Outer Client or other Peer
    """

    def Request(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetScoreStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateTx(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTx(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPrecommitBlock(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetInvokeResult(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BlockSync(self, request, context):
      """Peer 의 Block Height 보정용 interface
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceUnconfirmedBlock(self, request, context):
      """Subscribe 후 broadcast 받는 인터페이스는 Announce- 로 시작한다.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceNewBlockForVote(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceConfirmedBlock(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceNewPeer(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceDeletePeer(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Echo(self, request, context):
      """Test 검증을 위한 인터페이스
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ComplainLeader(self, request, context):
      """Leader 선정을 위한 인터페이스
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceNewLeader(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetChannelInfos(self, request, context):
      """RadioStation(High layer node) function
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetLastBlockHash(self, request, context):
      """/////////////////////////////////////////////////////////////////////
      BlockGenerator (leader) 에게만 허용되어야 하는 interface
      /////////////////////////////////////////////////////////////////////
      RadioStation 에서 GetLastBlockHash 는 Block Height Sync 를 위해서 사용된다.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
      """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 radiostation.proto 와 동일하게 구성되어야 한다.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UnSubscribe(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddTx(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddTxList(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def VoteUnconfirmedBlock(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BroadcastVote(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PeerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Request': grpc.unary_unary_rpc_method_handler(
            servicer.Request,
            request_deserializer=Message.FromString,
            response_serializer=Message.SerializeToString,
        ),
        'GetStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetStatus,
            request_deserializer=StatusRequest.FromString,
            response_serializer=StatusReply.SerializeToString,
        ),
        'GetScoreStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetScoreStatus,
            request_deserializer=StatusRequest.FromString,
            response_serializer=StatusReply.SerializeToString,
        ),
        'Stop': grpc.unary_unary_rpc_method_handler(
            servicer.Stop,
            request_deserializer=StopRequest.FromString,
            response_serializer=StopReply.SerializeToString,
        ),
        'CreateTx': grpc.unary_unary_rpc_method_handler(
            servicer.CreateTx,
            request_deserializer=CreateTxRequest.FromString,
            response_serializer=CreateTxReply.SerializeToString,
        ),
        'GetTx': grpc.unary_unary_rpc_method_handler(
            servicer.GetTx,
            request_deserializer=GetTxRequest.FromString,
            response_serializer=GetTxReply.SerializeToString,
        ),
        'GetBlock': grpc.unary_unary_rpc_method_handler(
            servicer.GetBlock,
            request_deserializer=GetBlockRequest.FromString,
            response_serializer=GetBlockReply.SerializeToString,
        ),
        'GetPrecommitBlock': grpc.unary_unary_rpc_method_handler(
            servicer.GetPrecommitBlock,
            request_deserializer=PrecommitBlockRequest.FromString,
            response_serializer=PrecommitBlockReply.SerializeToString,
        ),
        'Query': grpc.unary_unary_rpc_method_handler(
            servicer.Query,
            request_deserializer=QueryRequest.FromString,
            response_serializer=QueryReply.SerializeToString,
        ),
        'GetInvokeResult': grpc.unary_unary_rpc_method_handler(
            servicer.GetInvokeResult,
            request_deserializer=GetInvokeResultRequest.FromString,
            response_serializer=GetInvokeResultReply.SerializeToString,
        ),
        'BlockSync': grpc.unary_unary_rpc_method_handler(
            servicer.BlockSync,
            request_deserializer=BlockSyncRequest.FromString,
            response_serializer=BlockSyncReply.SerializeToString,
        ),
        'AnnounceUnconfirmedBlock': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceUnconfirmedBlock,
            request_deserializer=BlockSend.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AnnounceNewBlockForVote': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceNewBlockForVote,
            request_deserializer=NewBlockSend.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AnnounceConfirmedBlock': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceConfirmedBlock,
            request_deserializer=BlockAnnounce.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AnnounceNewPeer': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceNewPeer,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AnnounceDeletePeer': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceDeletePeer,
            request_deserializer=PeerID.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'Echo': grpc.unary_unary_rpc_method_handler(
            servicer.Echo,
            request_deserializer=CommonRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'ComplainLeader': grpc.unary_unary_rpc_method_handler(
            servicer.ComplainLeader,
            request_deserializer=ComplainLeaderRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AnnounceNewLeader': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceNewLeader,
            request_deserializer=ComplainLeaderRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'GetChannelInfos': grpc.unary_unary_rpc_method_handler(
            servicer.GetChannelInfos,
            request_deserializer=GetChannelInfosRequest.FromString,
            response_serializer=GetChannelInfosReply.SerializeToString,
        ),
        'GetLastBlockHash': grpc.unary_unary_rpc_method_handler(
            servicer.GetLastBlockHash,
            request_deserializer=CommonRequest.FromString,
            response_serializer=BlockReply.SerializeToString,
        ),
        'Subscribe': grpc.unary_unary_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'UnSubscribe': grpc.unary_unary_rpc_method_handler(
            servicer.UnSubscribe,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AddTx': grpc.unary_unary_rpc_method_handler(
            servicer.AddTx,
            request_deserializer=TxSend.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'AddTxList': grpc.unary_unary_rpc_method_handler(
            servicer.AddTxList,
            request_deserializer=TxSendList.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'VoteUnconfirmedBlock': grpc.unary_unary_rpc_method_handler(
            servicer.VoteUnconfirmedBlock,
            request_deserializer=BlockVote.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'BroadcastVote': grpc.unary_unary_rpc_method_handler(
            servicer.BroadcastVote,
            request_deserializer=Vote.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PeerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class RadioStationStub(object):
    """########################################################################
    RadioStation Services
    ########################################################################

    RadioStation Outer Service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Request = channel.unary_unary(
          '/RadioStation/Request',
          request_serializer=Message.SerializeToString,
          response_deserializer=Message.FromString,
          )
      self.GetStatus = channel.unary_unary(
          '/RadioStation/GetStatus',
          request_serializer=StatusRequest.SerializeToString,
          response_deserializer=StatusReply.FromString,
          )
      self.Stop = channel.unary_unary(
          '/RadioStation/Stop',
          request_serializer=StopRequest.SerializeToString,
          response_deserializer=StopReply.FromString,
          )
      self.GetChannelInfos = channel.unary_unary(
          '/RadioStation/GetChannelInfos',
          request_serializer=GetChannelInfosRequest.SerializeToString,
          response_deserializer=GetChannelInfosReply.FromString,
          )
      self.ConnectPeer = channel.unary_unary(
          '/RadioStation/ConnectPeer',
          request_serializer=ConnectPeerRequest.SerializeToString,
          response_deserializer=ConnectPeerReply.FromString,
          )
      self.GetPeerList = channel.unary_unary(
          '/RadioStation/GetPeerList',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=PeerList.FromString,
          )
      self.GetPeerStatus = channel.unary_unary(
          '/RadioStation/GetPeerStatus',
          request_serializer=PeerID.SerializeToString,
          response_deserializer=StatusReply.FromString,
          )
      self.AnnounceNewLeader = channel.unary_unary(
          '/RadioStation/AnnounceNewLeader',
          request_serializer=ComplainLeaderRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.GetRandomTable = channel.unary_unary(
          '/RadioStation/GetRandomTable',
          request_serializer=CommonRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.Subscribe = channel.unary_unary(
          '/RadioStation/Subscribe',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )
      self.UnSubscribe = channel.unary_unary(
          '/RadioStation/UnSubscribe',
          request_serializer=PeerRequest.SerializeToString,
          response_deserializer=CommonReply.FromString,
          )


  class RadioStationServicer(object):
    """########################################################################
    RadioStation Services
    ########################################################################

    RadioStation Outer Service
    """

    def Request(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetChannelInfos(self, request, context):
      """Peer 접속
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ConnectPeer(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPeerList(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPeerStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnnounceNewLeader(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetRandomTable(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
      """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 loopchain.proto 와 동일하게 구성되어야 한다.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UnSubscribe(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_RadioStationServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Request': grpc.unary_unary_rpc_method_handler(
            servicer.Request,
            request_deserializer=Message.FromString,
            response_serializer=Message.SerializeToString,
        ),
        'GetStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetStatus,
            request_deserializer=StatusRequest.FromString,
            response_serializer=StatusReply.SerializeToString,
        ),
        'Stop': grpc.unary_unary_rpc_method_handler(
            servicer.Stop,
            request_deserializer=StopRequest.FromString,
            response_serializer=StopReply.SerializeToString,
        ),
        'GetChannelInfos': grpc.unary_unary_rpc_method_handler(
            servicer.GetChannelInfos,
            request_deserializer=GetChannelInfosRequest.FromString,
            response_serializer=GetChannelInfosReply.SerializeToString,
        ),
        'ConnectPeer': grpc.unary_unary_rpc_method_handler(
            servicer.ConnectPeer,
            request_deserializer=ConnectPeerRequest.FromString,
            response_serializer=ConnectPeerReply.SerializeToString,
        ),
        'GetPeerList': grpc.unary_unary_rpc_method_handler(
            servicer.GetPeerList,
            request_deserializer=CommonRequest.FromString,
            response_serializer=PeerList.SerializeToString,
        ),
        'GetPeerStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetPeerStatus,
            request_deserializer=PeerID.FromString,
            response_serializer=StatusReply.SerializeToString,
        ),
        'AnnounceNewLeader': grpc.unary_unary_rpc_method_handler(
            servicer.AnnounceNewLeader,
            request_deserializer=ComplainLeaderRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'GetRandomTable': grpc.unary_unary_rpc_method_handler(
            servicer.GetRandomTable,
            request_deserializer=CommonRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'Subscribe': grpc.unary_unary_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
        'UnSubscribe': grpc.unary_unary_rpc_method_handler(
            servicer.UnSubscribe,
            request_deserializer=PeerRequest.FromString,
            response_serializer=CommonReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'RadioStation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class AdminServiceStub(object):
    """RadioStation Inner Service for Admin
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Request = channel.unary_unary(
          '/AdminService/Request',
          request_serializer=Message.SerializeToString,
          response_deserializer=Message.FromString,
          )


  class AdminServiceServicer(object):
    """RadioStation Inner Service for Admin
    """

    def Request(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Request': grpc.unary_unary_rpc_method_handler(
            servicer.Request,
            request_deserializer=Message.FromString,
            response_serializer=Message.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class ContainerStub(object):
    """########################################################################
    Container Service
    ########################################################################

    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Request = channel.unary_unary(
          '/Container/Request',
          request_serializer=Message.SerializeToString,
          response_deserializer=Message.FromString,
          )


  class ContainerServicer(object):
    """########################################################################
    Container Service
    ########################################################################

    """

    def Request(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ContainerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Request': grpc.unary_unary_rpc_method_handler(
            servicer.Request,
            request_deserializer=Message.FromString,
            response_serializer=Message.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Container', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaInnerServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """########################################################################
    Peer Services
    ########################################################################

    Peer Inner Service
    """
    def Request(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetScoreStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Stop(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Echo(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetBlock(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Query(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Subscribe(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UnSubscribe(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def NotifyLeaderBroken(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def NotifyProcessError(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaInnerServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """########################################################################
    Peer Services
    ########################################################################

    Peer Inner Service
    """
    def Request(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Request.future = None
    def GetStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetStatus.future = None
    def GetScoreStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetScoreStatus.future = None
    def Stop(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Stop.future = None
    def Echo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Echo.future = None
    def GetBlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetBlock.future = None
    def Query(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Query.future = None
    def Subscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Subscribe.future = None
    def UnSubscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UnSubscribe.future = None
    def NotifyLeaderBroken(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    NotifyLeaderBroken.future = None
    def NotifyProcessError(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    NotifyProcessError.future = None


  def beta_create_InnerService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('InnerService', 'Echo'): CommonRequest.FromString,
      ('InnerService', 'GetBlock'): GetBlockRequest.FromString,
      ('InnerService', 'GetScoreStatus'): StatusRequest.FromString,
      ('InnerService', 'GetStatus'): StatusRequest.FromString,
      ('InnerService', 'NotifyLeaderBroken'): CommonRequest.FromString,
      ('InnerService', 'NotifyProcessError'): CommonRequest.FromString,
      ('InnerService', 'Query'): QueryRequest.FromString,
      ('InnerService', 'Request'): Message.FromString,
      ('InnerService', 'Stop'): StopRequest.FromString,
      ('InnerService', 'Subscribe'): PeerRequest.FromString,
      ('InnerService', 'UnSubscribe'): PeerRequest.FromString,
    }
    response_serializers = {
      ('InnerService', 'Echo'): CommonReply.SerializeToString,
      ('InnerService', 'GetBlock'): GetBlockReply.SerializeToString,
      ('InnerService', 'GetScoreStatus'): StatusReply.SerializeToString,
      ('InnerService', 'GetStatus'): StatusReply.SerializeToString,
      ('InnerService', 'NotifyLeaderBroken'): CommonReply.SerializeToString,
      ('InnerService', 'NotifyProcessError'): CommonReply.SerializeToString,
      ('InnerService', 'Query'): QueryReply.SerializeToString,
      ('InnerService', 'Request'): Message.SerializeToString,
      ('InnerService', 'Stop'): StopReply.SerializeToString,
      ('InnerService', 'Subscribe'): CommonReply.SerializeToString,
      ('InnerService', 'UnSubscribe'): CommonReply.SerializeToString,
    }
    method_implementations = {
      ('InnerService', 'Echo'): face_utilities.unary_unary_inline(servicer.Echo),
      ('InnerService', 'GetBlock'): face_utilities.unary_unary_inline(servicer.GetBlock),
      ('InnerService', 'GetScoreStatus'): face_utilities.unary_unary_inline(servicer.GetScoreStatus),
      ('InnerService', 'GetStatus'): face_utilities.unary_unary_inline(servicer.GetStatus),
      ('InnerService', 'NotifyLeaderBroken'): face_utilities.unary_unary_inline(servicer.NotifyLeaderBroken),
      ('InnerService', 'NotifyProcessError'): face_utilities.unary_unary_inline(servicer.NotifyProcessError),
      ('InnerService', 'Query'): face_utilities.unary_unary_inline(servicer.Query),
      ('InnerService', 'Request'): face_utilities.unary_unary_inline(servicer.Request),
      ('InnerService', 'Stop'): face_utilities.unary_unary_inline(servicer.Stop),
      ('InnerService', 'Subscribe'): face_utilities.unary_unary_inline(servicer.Subscribe),
      ('InnerService', 'UnSubscribe'): face_utilities.unary_unary_inline(servicer.UnSubscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_InnerService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('InnerService', 'Echo'): CommonRequest.SerializeToString,
      ('InnerService', 'GetBlock'): GetBlockRequest.SerializeToString,
      ('InnerService', 'GetScoreStatus'): StatusRequest.SerializeToString,
      ('InnerService', 'GetStatus'): StatusRequest.SerializeToString,
      ('InnerService', 'NotifyLeaderBroken'): CommonRequest.SerializeToString,
      ('InnerService', 'NotifyProcessError'): CommonRequest.SerializeToString,
      ('InnerService', 'Query'): QueryRequest.SerializeToString,
      ('InnerService', 'Request'): Message.SerializeToString,
      ('InnerService', 'Stop'): StopRequest.SerializeToString,
      ('InnerService', 'Subscribe'): PeerRequest.SerializeToString,
      ('InnerService', 'UnSubscribe'): PeerRequest.SerializeToString,
    }
    response_deserializers = {
      ('InnerService', 'Echo'): CommonReply.FromString,
      ('InnerService', 'GetBlock'): GetBlockReply.FromString,
      ('InnerService', 'GetScoreStatus'): StatusReply.FromString,
      ('InnerService', 'GetStatus'): StatusReply.FromString,
      ('InnerService', 'NotifyLeaderBroken'): CommonReply.FromString,
      ('InnerService', 'NotifyProcessError'): CommonReply.FromString,
      ('InnerService', 'Query'): QueryReply.FromString,
      ('InnerService', 'Request'): Message.FromString,
      ('InnerService', 'Stop'): StopReply.FromString,
      ('InnerService', 'Subscribe'): CommonReply.FromString,
      ('InnerService', 'UnSubscribe'): CommonReply.FromString,
    }
    cardinalities = {
      'Echo': cardinality.Cardinality.UNARY_UNARY,
      'GetBlock': cardinality.Cardinality.UNARY_UNARY,
      'GetScoreStatus': cardinality.Cardinality.UNARY_UNARY,
      'GetStatus': cardinality.Cardinality.UNARY_UNARY,
      'NotifyLeaderBroken': cardinality.Cardinality.UNARY_UNARY,
      'NotifyProcessError': cardinality.Cardinality.UNARY_UNARY,
      'Query': cardinality.Cardinality.UNARY_UNARY,
      'Request': cardinality.Cardinality.UNARY_UNARY,
      'Stop': cardinality.Cardinality.UNARY_UNARY,
      'Subscribe': cardinality.Cardinality.UNARY_UNARY,
      'UnSubscribe': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'InnerService', cardinalities, options=stub_options)


  class BetaPeerServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Peer Outer Service for Outer Client or other Peer
    """
    def Request(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetScoreStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Stop(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateTx(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTx(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetBlock(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPrecommitBlock(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Query(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetInvokeResult(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BlockSync(self, request, context):
      """Peer 의 Block Height 보정용 interface
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceUnconfirmedBlock(self, request, context):
      """Subscribe 후 broadcast 받는 인터페이스는 Announce- 로 시작한다.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceNewBlockForVote(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceConfirmedBlock(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceNewPeer(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceDeletePeer(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Echo(self, request, context):
      """Test 검증을 위한 인터페이스
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ComplainLeader(self, request, context):
      """Leader 선정을 위한 인터페이스
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceNewLeader(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetChannelInfos(self, request, context):
      """RadioStation(High layer node) function
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetLastBlockHash(self, request, context):
      """/////////////////////////////////////////////////////////////////////
      BlockGenerator (leader) 에게만 허용되어야 하는 interface
      /////////////////////////////////////////////////////////////////////
      RadioStation 에서 GetLastBlockHash 는 Block Height Sync 를 위해서 사용된다.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Subscribe(self, request, context):
      """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 radiostation.proto 와 동일하게 구성되어야 한다.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UnSubscribe(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddTx(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddTxList(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def VoteUnconfirmedBlock(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BroadcastVote(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPeerServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Peer Outer Service for Outer Client or other Peer
    """
    def Request(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Request.future = None
    def GetStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetStatus.future = None
    def GetScoreStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetScoreStatus.future = None
    def Stop(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Stop.future = None
    def CreateTx(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    CreateTx.future = None
    def GetTx(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetTx.future = None
    def GetBlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetBlock.future = None
    def GetPrecommitBlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetPrecommitBlock.future = None
    def Query(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Query.future = None
    def GetInvokeResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetInvokeResult.future = None
    def BlockSync(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Peer 의 Block Height 보정용 interface
      """
      raise NotImplementedError()
    BlockSync.future = None
    def AnnounceUnconfirmedBlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Subscribe 후 broadcast 받는 인터페이스는 Announce- 로 시작한다.
      """
      raise NotImplementedError()
    AnnounceUnconfirmedBlock.future = None
    def AnnounceNewBlockForVote(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AnnounceNewBlockForVote.future = None
    def AnnounceConfirmedBlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AnnounceConfirmedBlock.future = None
    def AnnounceNewPeer(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AnnounceNewPeer.future = None
    def AnnounceDeletePeer(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AnnounceDeletePeer.future = None
    def Echo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Test 검증을 위한 인터페이스
      """
      raise NotImplementedError()
    Echo.future = None
    def ComplainLeader(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Leader 선정을 위한 인터페이스
      """
      raise NotImplementedError()
    ComplainLeader.future = None
    def AnnounceNewLeader(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AnnounceNewLeader.future = None
    def GetChannelInfos(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """RadioStation(High layer node) function
      """
      raise NotImplementedError()
    GetChannelInfos.future = None
    def GetLastBlockHash(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/////////////////////////////////////////////////////////////////////
      BlockGenerator (leader) 에게만 허용되어야 하는 interface
      /////////////////////////////////////////////////////////////////////
      RadioStation 에서 GetLastBlockHash 는 Block Height Sync 를 위해서 사용된다.
      """
      raise NotImplementedError()
    GetLastBlockHash.future = None
    def Subscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 radiostation.proto 와 동일하게 구성되어야 한다.
      """
      raise NotImplementedError()
    Subscribe.future = None
    def UnSubscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UnSubscribe.future = None
    def AddTx(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddTx.future = None
    def AddTxList(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddTxList.future = None
    def VoteUnconfirmedBlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    VoteUnconfirmedBlock.future = None
    def BroadcastVote(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    BroadcastVote.future = None


  def beta_create_PeerService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PeerService', 'AddTx'): TxSend.FromString,
      ('PeerService', 'AddTxList'): TxSendList.FromString,
      ('PeerService', 'AnnounceConfirmedBlock'): BlockAnnounce.FromString,
      ('PeerService', 'AnnounceDeletePeer'): PeerID.FromString,
      ('PeerService', 'AnnounceNewBlockForVote'): NewBlockSend.FromString,
      ('PeerService', 'AnnounceNewLeader'): ComplainLeaderRequest.FromString,
      ('PeerService', 'AnnounceNewPeer'): PeerRequest.FromString,
      ('PeerService', 'AnnounceUnconfirmedBlock'): BlockSend.FromString,
      ('PeerService', 'BlockSync'): BlockSyncRequest.FromString,
      ('PeerService', 'BroadcastVote'): Vote.FromString,
      ('PeerService', 'ComplainLeader'): ComplainLeaderRequest.FromString,
      ('PeerService', 'CreateTx'): CreateTxRequest.FromString,
      ('PeerService', 'Echo'): CommonRequest.FromString,
      ('PeerService', 'GetBlock'): GetBlockRequest.FromString,
      ('PeerService', 'GetChannelInfos'): GetChannelInfosRequest.FromString,
      ('PeerService', 'GetInvokeResult'): GetInvokeResultRequest.FromString,
      ('PeerService', 'GetLastBlockHash'): CommonRequest.FromString,
      ('PeerService', 'GetPrecommitBlock'): PrecommitBlockRequest.FromString,
      ('PeerService', 'GetScoreStatus'): StatusRequest.FromString,
      ('PeerService', 'GetStatus'): StatusRequest.FromString,
      ('PeerService', 'GetTx'): GetTxRequest.FromString,
      ('PeerService', 'Query'): QueryRequest.FromString,
      ('PeerService', 'Request'): Message.FromString,
      ('PeerService', 'Stop'): StopRequest.FromString,
      ('PeerService', 'Subscribe'): PeerRequest.FromString,
      ('PeerService', 'UnSubscribe'): PeerRequest.FromString,
      ('PeerService', 'VoteUnconfirmedBlock'): BlockVote.FromString,
    }
    response_serializers = {
      ('PeerService', 'AddTx'): CommonReply.SerializeToString,
      ('PeerService', 'AddTxList'): CommonReply.SerializeToString,
      ('PeerService', 'AnnounceConfirmedBlock'): CommonReply.SerializeToString,
      ('PeerService', 'AnnounceDeletePeer'): CommonReply.SerializeToString,
      ('PeerService', 'AnnounceNewBlockForVote'): CommonReply.SerializeToString,
      ('PeerService', 'AnnounceNewLeader'): CommonReply.SerializeToString,
      ('PeerService', 'AnnounceNewPeer'): CommonReply.SerializeToString,
      ('PeerService', 'AnnounceUnconfirmedBlock'): CommonReply.SerializeToString,
      ('PeerService', 'BlockSync'): BlockSyncReply.SerializeToString,
      ('PeerService', 'BroadcastVote'): CommonReply.SerializeToString,
      ('PeerService', 'ComplainLeader'): CommonReply.SerializeToString,
      ('PeerService', 'CreateTx'): CreateTxReply.SerializeToString,
      ('PeerService', 'Echo'): CommonReply.SerializeToString,
      ('PeerService', 'GetBlock'): GetBlockReply.SerializeToString,
      ('PeerService', 'GetChannelInfos'): GetChannelInfosReply.SerializeToString,
      ('PeerService', 'GetInvokeResult'): GetInvokeResultReply.SerializeToString,
      ('PeerService', 'GetLastBlockHash'): BlockReply.SerializeToString,
      ('PeerService', 'GetPrecommitBlock'): PrecommitBlockReply.SerializeToString,
      ('PeerService', 'GetScoreStatus'): StatusReply.SerializeToString,
      ('PeerService', 'GetStatus'): StatusReply.SerializeToString,
      ('PeerService', 'GetTx'): GetTxReply.SerializeToString,
      ('PeerService', 'Query'): QueryReply.SerializeToString,
      ('PeerService', 'Request'): Message.SerializeToString,
      ('PeerService', 'Stop'): StopReply.SerializeToString,
      ('PeerService', 'Subscribe'): CommonReply.SerializeToString,
      ('PeerService', 'UnSubscribe'): CommonReply.SerializeToString,
      ('PeerService', 'VoteUnconfirmedBlock'): CommonReply.SerializeToString,
    }
    method_implementations = {
      ('PeerService', 'AddTx'): face_utilities.unary_unary_inline(servicer.AddTx),
      ('PeerService', 'AddTxList'): face_utilities.unary_unary_inline(servicer.AddTxList),
      ('PeerService', 'AnnounceConfirmedBlock'): face_utilities.unary_unary_inline(servicer.AnnounceConfirmedBlock),
      ('PeerService', 'AnnounceDeletePeer'): face_utilities.unary_unary_inline(servicer.AnnounceDeletePeer),
      ('PeerService', 'AnnounceNewBlockForVote'): face_utilities.unary_unary_inline(servicer.AnnounceNewBlockForVote),
      ('PeerService', 'AnnounceNewLeader'): face_utilities.unary_unary_inline(servicer.AnnounceNewLeader),
      ('PeerService', 'AnnounceNewPeer'): face_utilities.unary_unary_inline(servicer.AnnounceNewPeer),
      ('PeerService', 'AnnounceUnconfirmedBlock'): face_utilities.unary_unary_inline(servicer.AnnounceUnconfirmedBlock),
      ('PeerService', 'BlockSync'): face_utilities.unary_unary_inline(servicer.BlockSync),
      ('PeerService', 'BroadcastVote'): face_utilities.unary_unary_inline(servicer.BroadcastVote),
      ('PeerService', 'ComplainLeader'): face_utilities.unary_unary_inline(servicer.ComplainLeader),
      ('PeerService', 'CreateTx'): face_utilities.unary_unary_inline(servicer.CreateTx),
      ('PeerService', 'Echo'): face_utilities.unary_unary_inline(servicer.Echo),
      ('PeerService', 'GetBlock'): face_utilities.unary_unary_inline(servicer.GetBlock),
      ('PeerService', 'GetChannelInfos'): face_utilities.unary_unary_inline(servicer.GetChannelInfos),
      ('PeerService', 'GetInvokeResult'): face_utilities.unary_unary_inline(servicer.GetInvokeResult),
      ('PeerService', 'GetLastBlockHash'): face_utilities.unary_unary_inline(servicer.GetLastBlockHash),
      ('PeerService', 'GetPrecommitBlock'): face_utilities.unary_unary_inline(servicer.GetPrecommitBlock),
      ('PeerService', 'GetScoreStatus'): face_utilities.unary_unary_inline(servicer.GetScoreStatus),
      ('PeerService', 'GetStatus'): face_utilities.unary_unary_inline(servicer.GetStatus),
      ('PeerService', 'GetTx'): face_utilities.unary_unary_inline(servicer.GetTx),
      ('PeerService', 'Query'): face_utilities.unary_unary_inline(servicer.Query),
      ('PeerService', 'Request'): face_utilities.unary_unary_inline(servicer.Request),
      ('PeerService', 'Stop'): face_utilities.unary_unary_inline(servicer.Stop),
      ('PeerService', 'Subscribe'): face_utilities.unary_unary_inline(servicer.Subscribe),
      ('PeerService', 'UnSubscribe'): face_utilities.unary_unary_inline(servicer.UnSubscribe),
      ('PeerService', 'VoteUnconfirmedBlock'): face_utilities.unary_unary_inline(servicer.VoteUnconfirmedBlock),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PeerService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PeerService', 'AddTx'): TxSend.SerializeToString,
      ('PeerService', 'AddTxList'): TxSendList.SerializeToString,
      ('PeerService', 'AnnounceConfirmedBlock'): BlockAnnounce.SerializeToString,
      ('PeerService', 'AnnounceDeletePeer'): PeerID.SerializeToString,
      ('PeerService', 'AnnounceNewBlockForVote'): NewBlockSend.SerializeToString,
      ('PeerService', 'AnnounceNewLeader'): ComplainLeaderRequest.SerializeToString,
      ('PeerService', 'AnnounceNewPeer'): PeerRequest.SerializeToString,
      ('PeerService', 'AnnounceUnconfirmedBlock'): BlockSend.SerializeToString,
      ('PeerService', 'BlockSync'): BlockSyncRequest.SerializeToString,
      ('PeerService', 'BroadcastVote'): Vote.SerializeToString,
      ('PeerService', 'ComplainLeader'): ComplainLeaderRequest.SerializeToString,
      ('PeerService', 'CreateTx'): CreateTxRequest.SerializeToString,
      ('PeerService', 'Echo'): CommonRequest.SerializeToString,
      ('PeerService', 'GetBlock'): GetBlockRequest.SerializeToString,
      ('PeerService', 'GetChannelInfos'): GetChannelInfosRequest.SerializeToString,
      ('PeerService', 'GetInvokeResult'): GetInvokeResultRequest.SerializeToString,
      ('PeerService', 'GetLastBlockHash'): CommonRequest.SerializeToString,
      ('PeerService', 'GetPrecommitBlock'): PrecommitBlockRequest.SerializeToString,
      ('PeerService', 'GetScoreStatus'): StatusRequest.SerializeToString,
      ('PeerService', 'GetStatus'): StatusRequest.SerializeToString,
      ('PeerService', 'GetTx'): GetTxRequest.SerializeToString,
      ('PeerService', 'Query'): QueryRequest.SerializeToString,
      ('PeerService', 'Request'): Message.SerializeToString,
      ('PeerService', 'Stop'): StopRequest.SerializeToString,
      ('PeerService', 'Subscribe'): PeerRequest.SerializeToString,
      ('PeerService', 'UnSubscribe'): PeerRequest.SerializeToString,
      ('PeerService', 'VoteUnconfirmedBlock'): BlockVote.SerializeToString,
    }
    response_deserializers = {
      ('PeerService', 'AddTx'): CommonReply.FromString,
      ('PeerService', 'AddTxList'): CommonReply.FromString,
      ('PeerService', 'AnnounceConfirmedBlock'): CommonReply.FromString,
      ('PeerService', 'AnnounceDeletePeer'): CommonReply.FromString,
      ('PeerService', 'AnnounceNewBlockForVote'): CommonReply.FromString,
      ('PeerService', 'AnnounceNewLeader'): CommonReply.FromString,
      ('PeerService', 'AnnounceNewPeer'): CommonReply.FromString,
      ('PeerService', 'AnnounceUnconfirmedBlock'): CommonReply.FromString,
      ('PeerService', 'BlockSync'): BlockSyncReply.FromString,
      ('PeerService', 'BroadcastVote'): CommonReply.FromString,
      ('PeerService', 'ComplainLeader'): CommonReply.FromString,
      ('PeerService', 'CreateTx'): CreateTxReply.FromString,
      ('PeerService', 'Echo'): CommonReply.FromString,
      ('PeerService', 'GetBlock'): GetBlockReply.FromString,
      ('PeerService', 'GetChannelInfos'): GetChannelInfosReply.FromString,
      ('PeerService', 'GetInvokeResult'): GetInvokeResultReply.FromString,
      ('PeerService', 'GetLastBlockHash'): BlockReply.FromString,
      ('PeerService', 'GetPrecommitBlock'): PrecommitBlockReply.FromString,
      ('PeerService', 'GetScoreStatus'): StatusReply.FromString,
      ('PeerService', 'GetStatus'): StatusReply.FromString,
      ('PeerService', 'GetTx'): GetTxReply.FromString,
      ('PeerService', 'Query'): QueryReply.FromString,
      ('PeerService', 'Request'): Message.FromString,
      ('PeerService', 'Stop'): StopReply.FromString,
      ('PeerService', 'Subscribe'): CommonReply.FromString,
      ('PeerService', 'UnSubscribe'): CommonReply.FromString,
      ('PeerService', 'VoteUnconfirmedBlock'): CommonReply.FromString,
    }
    cardinalities = {
      'AddTx': cardinality.Cardinality.UNARY_UNARY,
      'AddTxList': cardinality.Cardinality.UNARY_UNARY,
      'AnnounceConfirmedBlock': cardinality.Cardinality.UNARY_UNARY,
      'AnnounceDeletePeer': cardinality.Cardinality.UNARY_UNARY,
      'AnnounceNewBlockForVote': cardinality.Cardinality.UNARY_UNARY,
      'AnnounceNewLeader': cardinality.Cardinality.UNARY_UNARY,
      'AnnounceNewPeer': cardinality.Cardinality.UNARY_UNARY,
      'AnnounceUnconfirmedBlock': cardinality.Cardinality.UNARY_UNARY,
      'BlockSync': cardinality.Cardinality.UNARY_UNARY,
      'BroadcastVote': cardinality.Cardinality.UNARY_UNARY,
      'ComplainLeader': cardinality.Cardinality.UNARY_UNARY,
      'CreateTx': cardinality.Cardinality.UNARY_UNARY,
      'Echo': cardinality.Cardinality.UNARY_UNARY,
      'GetBlock': cardinality.Cardinality.UNARY_UNARY,
      'GetChannelInfos': cardinality.Cardinality.UNARY_UNARY,
      'GetInvokeResult': cardinality.Cardinality.UNARY_UNARY,
      'GetLastBlockHash': cardinality.Cardinality.UNARY_UNARY,
      'GetPrecommitBlock': cardinality.Cardinality.UNARY_UNARY,
      'GetScoreStatus': cardinality.Cardinality.UNARY_UNARY,
      'GetStatus': cardinality.Cardinality.UNARY_UNARY,
      'GetTx': cardinality.Cardinality.UNARY_UNARY,
      'Query': cardinality.Cardinality.UNARY_UNARY,
      'Request': cardinality.Cardinality.UNARY_UNARY,
      'Stop': cardinality.Cardinality.UNARY_UNARY,
      'Subscribe': cardinality.Cardinality.UNARY_UNARY,
      'UnSubscribe': cardinality.Cardinality.UNARY_UNARY,
      'VoteUnconfirmedBlock': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PeerService', cardinalities, options=stub_options)


  class BetaRadioStationServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """########################################################################
    RadioStation Services
    ########################################################################

    RadioStation Outer Service
    """
    def Request(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Stop(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetChannelInfos(self, request, context):
      """Peer 접속
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ConnectPeer(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPeerList(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPeerStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnnounceNewLeader(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetRandomTable(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Subscribe(self, request, context):
      """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 loopchain.proto 와 동일하게 구성되어야 한다.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UnSubscribe(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaRadioStationStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """########################################################################
    RadioStation Services
    ########################################################################

    RadioStation Outer Service
    """
    def Request(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Request.future = None
    def GetStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetStatus.future = None
    def Stop(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Stop.future = None
    def GetChannelInfos(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Peer 접속
      """
      raise NotImplementedError()
    GetChannelInfos.future = None
    def ConnectPeer(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ConnectPeer.future = None
    def GetPeerList(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetPeerList.future = None
    def GetPeerStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetPeerStatus.future = None
    def AnnounceNewLeader(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AnnounceNewLeader.future = None
    def GetRandomTable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetRandomTable.future = None
    def Subscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 loopchain.proto 와 동일하게 구성되어야 한다.
      """
      raise NotImplementedError()
    Subscribe.future = None
    def UnSubscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UnSubscribe.future = None


  def beta_create_RadioStation_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('RadioStation', 'AnnounceNewLeader'): ComplainLeaderRequest.FromString,
      ('RadioStation', 'ConnectPeer'): ConnectPeerRequest.FromString,
      ('RadioStation', 'GetChannelInfos'): GetChannelInfosRequest.FromString,
      ('RadioStation', 'GetPeerList'): CommonRequest.FromString,
      ('RadioStation', 'GetPeerStatus'): PeerID.FromString,
      ('RadioStation', 'GetRandomTable'): CommonRequest.FromString,
      ('RadioStation', 'GetStatus'): StatusRequest.FromString,
      ('RadioStation', 'Request'): Message.FromString,
      ('RadioStation', 'Stop'): StopRequest.FromString,
      ('RadioStation', 'Subscribe'): PeerRequest.FromString,
      ('RadioStation', 'UnSubscribe'): PeerRequest.FromString,
    }
    response_serializers = {
      ('RadioStation', 'AnnounceNewLeader'): CommonReply.SerializeToString,
      ('RadioStation', 'ConnectPeer'): ConnectPeerReply.SerializeToString,
      ('RadioStation', 'GetChannelInfos'): GetChannelInfosReply.SerializeToString,
      ('RadioStation', 'GetPeerList'): PeerList.SerializeToString,
      ('RadioStation', 'GetPeerStatus'): StatusReply.SerializeToString,
      ('RadioStation', 'GetRandomTable'): CommonReply.SerializeToString,
      ('RadioStation', 'GetStatus'): StatusReply.SerializeToString,
      ('RadioStation', 'Request'): Message.SerializeToString,
      ('RadioStation', 'Stop'): StopReply.SerializeToString,
      ('RadioStation', 'Subscribe'): CommonReply.SerializeToString,
      ('RadioStation', 'UnSubscribe'): CommonReply.SerializeToString,
    }
    method_implementations = {
      ('RadioStation', 'AnnounceNewLeader'): face_utilities.unary_unary_inline(servicer.AnnounceNewLeader),
      ('RadioStation', 'ConnectPeer'): face_utilities.unary_unary_inline(servicer.ConnectPeer),
      ('RadioStation', 'GetChannelInfos'): face_utilities.unary_unary_inline(servicer.GetChannelInfos),
      ('RadioStation', 'GetPeerList'): face_utilities.unary_unary_inline(servicer.GetPeerList),
      ('RadioStation', 'GetPeerStatus'): face_utilities.unary_unary_inline(servicer.GetPeerStatus),
      ('RadioStation', 'GetRandomTable'): face_utilities.unary_unary_inline(servicer.GetRandomTable),
      ('RadioStation', 'GetStatus'): face_utilities.unary_unary_inline(servicer.GetStatus),
      ('RadioStation', 'Request'): face_utilities.unary_unary_inline(servicer.Request),
      ('RadioStation', 'Stop'): face_utilities.unary_unary_inline(servicer.Stop),
      ('RadioStation', 'Subscribe'): face_utilities.unary_unary_inline(servicer.Subscribe),
      ('RadioStation', 'UnSubscribe'): face_utilities.unary_unary_inline(servicer.UnSubscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_RadioStation_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('RadioStation', 'AnnounceNewLeader'): ComplainLeaderRequest.SerializeToString,
      ('RadioStation', 'ConnectPeer'): ConnectPeerRequest.SerializeToString,
      ('RadioStation', 'GetChannelInfos'): GetChannelInfosRequest.SerializeToString,
      ('RadioStation', 'GetPeerList'): CommonRequest.SerializeToString,
      ('RadioStation', 'GetPeerStatus'): PeerID.SerializeToString,
      ('RadioStation', 'GetRandomTable'): CommonRequest.SerializeToString,
      ('RadioStation', 'GetStatus'): StatusRequest.SerializeToString,
      ('RadioStation', 'Request'): Message.SerializeToString,
      ('RadioStation', 'Stop'): StopRequest.SerializeToString,
      ('RadioStation', 'Subscribe'): PeerRequest.SerializeToString,
      ('RadioStation', 'UnSubscribe'): PeerRequest.SerializeToString,
    }
    response_deserializers = {
      ('RadioStation', 'AnnounceNewLeader'): CommonReply.FromString,
      ('RadioStation', 'ConnectPeer'): ConnectPeerReply.FromString,
      ('RadioStation', 'GetChannelInfos'): GetChannelInfosReply.FromString,
      ('RadioStation', 'GetPeerList'): PeerList.FromString,
      ('RadioStation', 'GetPeerStatus'): StatusReply.FromString,
      ('RadioStation', 'GetRandomTable'): CommonReply.FromString,
      ('RadioStation', 'GetStatus'): StatusReply.FromString,
      ('RadioStation', 'Request'): Message.FromString,
      ('RadioStation', 'Stop'): StopReply.FromString,
      ('RadioStation', 'Subscribe'): CommonReply.FromString,
      ('RadioStation', 'UnSubscribe'): CommonReply.FromString,
    }
    cardinalities = {
      'AnnounceNewLeader': cardinality.Cardinality.UNARY_UNARY,
      'ConnectPeer': cardinality.Cardinality.UNARY_UNARY,
      'GetChannelInfos': cardinality.Cardinality.UNARY_UNARY,
      'GetPeerList': cardinality.Cardinality.UNARY_UNARY,
      'GetPeerStatus': cardinality.Cardinality.UNARY_UNARY,
      'GetRandomTable': cardinality.Cardinality.UNARY_UNARY,
      'GetStatus': cardinality.Cardinality.UNARY_UNARY,
      'Request': cardinality.Cardinality.UNARY_UNARY,
      'Stop': cardinality.Cardinality.UNARY_UNARY,
      'Subscribe': cardinality.Cardinality.UNARY_UNARY,
      'UnSubscribe': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'RadioStation', cardinalities, options=stub_options)


  class BetaAdminServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """RadioStation Inner Service for Admin
    """
    def Request(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAdminServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """RadioStation Inner Service for Admin
    """
    def Request(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Request.future = None


  def beta_create_AdminService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('AdminService', 'Request'): Message.FromString,
    }
    response_serializers = {
      ('AdminService', 'Request'): Message.SerializeToString,
    }
    method_implementations = {
      ('AdminService', 'Request'): face_utilities.unary_unary_inline(servicer.Request),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AdminService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('AdminService', 'Request'): Message.SerializeToString,
    }
    response_deserializers = {
      ('AdminService', 'Request'): Message.FromString,
    }
    cardinalities = {
      'Request': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'AdminService', cardinalities, options=stub_options)


  class BetaContainerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """########################################################################
    Container Service
    ########################################################################

    """
    def Request(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaContainerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """########################################################################
    Container Service
    ########################################################################

    """
    def Request(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Request.future = None


  def beta_create_Container_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Container', 'Request'): Message.FromString,
    }
    response_serializers = {
      ('Container', 'Request'): Message.SerializeToString,
    }
    method_implementations = {
      ('Container', 'Request'): face_utilities.unary_unary_inline(servicer.Request),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Container_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Container', 'Request'): Message.SerializeToString,
    }
    response_deserializers = {
      ('Container', 'Request'): Message.FromString,
    }
    cardinalities = {
      'Request': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Container', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
